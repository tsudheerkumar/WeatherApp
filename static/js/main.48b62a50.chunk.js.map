{"version":3,"sources":["weatherCard.js","App.js","services/data.js","reportWebVitals.js","index.js"],"names":["WeatherCard","props","data","dt_txt","main","temp","humidity","description","weather","city","name","sunrise","sunset","Card","Content","Header","className","Date","toLocaleTimeString","refresh","window","location","reload","App","useState","setData","useEffect","fetch","API_KEY","then","json","items","list","Button","inverted","color","circular","icon","onClick","map","item","index","Dimmer","active","Loader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNA+CeA,MA3Cf,SAAsBC,GAClB,MASGA,EAAMC,KARLC,EADJ,EACIA,OADJ,IAEIC,KACIC,EAHR,EAGQA,KACAC,EAJR,EAIQA,SAGAC,EAPR,cAMIC,QANJ,MAOQD,YAGR,EAIGN,EAAMQ,KAHLC,EADJ,EACIA,KACAC,EAFJ,EAEIA,QACAC,EAHJ,EAGIA,OAGR,OACI,mCACA,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,QAAN,WACI,eAACD,EAAA,EAAKE,OAAN,CAAaC,UAAU,SAAvB,wBAA4CN,KAC5C,sBAAKM,UAAU,aAAf,UACI,sCAASb,EAAT,OACA,2CAAcG,EAAd,WAEJ,sBAAKU,UAAU,aAAf,UACI,6CAAgBX,KAChB,8CAAiBE,QAErB,sBAAKS,UAAU,aAAf,UACI,0CAAa,IAAIC,KAAe,IAAVN,GAAgBO,mBAAmB,YACzD,yCAAY,IAAID,KAAc,IAATL,GAAeM,mBAAmB,uB,kBC7BjEC,EAAU,WACdC,OAAOC,SAASC,UAsCHC,MAnCf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOtB,EAAP,KAAauB,EAAb,KASA,OAPAC,qBAAU,WCZDC,MAAM,sEAAD,OAAuEC,MAChFC,MAAK,SAAA3B,GAAI,OAAIA,EAAK4B,UDalBD,MAAK,SAAAE,GACFN,EAAQM,QAEb,IAGD,qBAAKf,UAAU,UAAf,SACwB,oBAAbd,EAAK8B,KACZ,qCACA,sBAAKhB,UAAU,aAAf,UACE,gDACA,cAACiB,EAAA,EAAD,CAAQjB,UAAU,SAASkB,UAAQ,EAACC,MAAM,OAAOC,UAAQ,EAACC,KAAK,UAAUC,QAASnB,OAEpF,oBAAIH,UAAU,iBAAd,SACGd,EAAK8B,MAAQ9B,EAAK8B,KAAKO,KAAI,SAACC,EAAKC,GAC9B,OAAO,cAAC,EAAD,CAAahC,KAAMP,EAAKO,KAAkBP,KAAMsC,GAAbC,WAKhD,8BACE,cAACC,EAAA,EAAD,CAAQC,QAAM,EAAd,SACE,cAACC,EAAA,EAAD,+BE1BGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.48b62a50.chunk.js","sourcesContent":["import { Card } from 'semantic-ui-react';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport \"./App.css\"\r\nfunction WeatherCard (props) {\r\n    const {\r\n        dt_txt,\r\n        main:{\r\n            temp,\r\n            humidity,\r\n        },\r\n        weather:[{\r\n            description,\r\n        }],\r\n    } =props.data;\r\n    const {\r\n        name,\r\n        sunrise,\r\n        sunset,\r\n    } =props.city;\r\n\r\nreturn (\r\n    <>\r\n    <Card>\r\n        <Card.Content>\r\n            <Card.Header className=\"header\">City Name: {name}</Card.Header>\r\n            <div className=\"flex-items\">\r\n                <p>Day: {dt_txt} </p>\r\n                <p>Humidity: {humidity} %</p>\r\n            </div>\r\n            <div className=\"flex-items\">\r\n                <p>Temprature: {temp}</p>\r\n                <p>Description: {description}</p>\r\n            </div>\r\n            <div className=\"flex-items\">\r\n                <p>Sunrise: {new Date(sunrise * 1000).toLocaleTimeString('en-IN')}</p>\r\n                <p>Sunset: {new Date(sunset * 1000).toLocaleTimeString('en-IN')}</p>\r\n            </div>           \r\n        </Card.Content>\r\n    </Card>\r\n    </>    \r\n);\r\n}\r\nWeatherCard.propTypes = {\r\n    city: PropTypes.object,\r\n    data: PropTypes.object,\r\n}\r\nexport default WeatherCard;","import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { getData } from './services/data';\nimport WeatherCard from './weatherCard';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\nconst refresh = () => {\n  window.location.reload();\n}\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    getData()\n      .then(items => {\n          setData(items);\n      })\n  }, [])\n\n  return (\n    <div className=\"wrapper\">\n      {(typeof data.list != 'undefined') ? (\n        <>\n        <div className=\"app-header\">\n          <h1>My Weather App</h1>\n          <Button className=\"button\" inverted color='blue' circular icon='refresh' onClick={refresh} />\n        </div>\n        <ul className=\"card-container\">\n          {data.list && data.list.map((item,index) => {\n              return <WeatherCard city={data.city} key={index} data={item} />\n          })}\n        </ul>\n     </>\n      ): (\n        <div>\n          <Dimmer active>\n            <Loader>Loading..</Loader>\n          </Dimmer>\n       </div>\n     )}\n     </div>\n  );\n}\n\nexport default App;\n","import {API_KEY} from \"../config.json\"\r\nexport function getData() {\r\n    return fetch(`https://api.openweathermap.org/data/2.5/forecast?q=Bangalore&appid=${API_KEY}`)\r\n      .then(data => data.json())\r\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}